upstream registry {
	server	registry-srv:5000;
}

upstream portus {
	server	registry-portus:443;
}

## Set a variable to help us decide if we need to add the
## 'Docker-Distribution-Api-Version' header.
## The registry always sets this header.
## In the case of nginx performing auth, the header will be unset
## since nginx is auth-ing before proxying.
map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
	'' 'registry/2.0';
}

server {
	listen		443 ssl default http2;
	server_name	your.registry.fqdn;

	# config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
	# to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

	# disable any limits to avoid HTTP 413 for large image uploads
	client_max_body_size 0;

	# required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
	chunked_transfer_encoding on;


	# Redirect (most) requests to /v2/* to the Docker Registry
	location /v2/ {

		# Do not allow connections from docker 1.5 and earlier
		# docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
		if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
			return 404;
		}

		## If $docker_distribution_api_version is empty, the header will not be added.
		## See the map directive above where this variable is defined.
		add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

		proxy_pass			    https://registry;
		proxy_set_header  Host              $http_host;   # required for docker client's sake
		proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
		proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
		proxy_set_header  X-Forwarded-Proto $scheme;
		proxy_read_timeout                  900;

	}

	# Portus needs to handle /v2/token for authentication
	location = /v2/token {
		proxy_pass                          https://portus;
                proxy_set_header  Host              $http_host;   # required for docker client's sake
                proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
        }

	# Portus needs to handle /v2/webhooks/events for notifications
	location = /v2/webhooks/events {
		proxy_pass                          https://portus;
                proxy_set_header  Host              $http_host;   # required for docker client's sake
                proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
        }
			
	# Portus handles everything else for the UI
	location / {
		proxy_pass                          https://portus;
		proxy_set_header  Host              $http_host;   # required for docker client's sake
                proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
                proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
                proxy_set_header  X-Forwarded-Proto $scheme;
                proxy_read_timeout                  900;
	}

}
